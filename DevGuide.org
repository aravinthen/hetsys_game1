* Developer Guide
This document outlines the structure and design of the /LaserGame/ project.

** Design
   The game is designed based on a hierarchy. The full game is actually a class that encompasses
   three subclasses: `Menu`, `Interface` and `LaserScript`. Each of the subclasses has direct access
   to the game class. 
   The game class itself is rudimentary and serves two purposes:
   - Calling the subclasses, in which the bulk of the computing is done.
   - Allowing the subclasses to communicate with each other. 
   
   The last of these points is the key utility of this design. For example, the level is selected
   through the Menu subclass, but it utilized by the Interface class.

** Structure
   The essential control mechanism for the states of the game is based around controlling the /mode/
   that the game is in. One can switch between modes by modifying the `self.mode` variable, which is
   done by calling the relevant function when the Player clicks on a button.
*** LaserGame
    LaserGame is the the class that ties in all of the subclasses. It is equipped with the following
    methods:
- `Draw()`: Carries out *all* the drawing procedures by calling said procedures from their
  subclasses. Note that the methods that actually do the drawing are local to their subclass: no
  actual drawing is carred in in this method.
- `Update()`: Updates the state of the subclass
- `Input()`: Allows the `LaserScript` class to communicate with the `Interface` class. LaserScript
  is intended to be a simple but complete programming language, so this part will likely by pretty
  extensive.

  The screen as well as all of the main `pygame` functionalities are included here.
*** Menu
    The menu has a number of functionalities. It serves as a default screen for the beginning of
    play; it allows the user to select a level (which controls the manner in which the other
    subclasses are initialized); it allows the storage and ranking of high scores; it provides
    instructions for the user and, of course, it provides a space for the credits. 
    In effect, `Menu` is itself broken down into submodes.

    Each of the functionalities have a method by which they are called. The methods are passed by an
    overall control: `UpdateMenu()`, which is itself called in the `Update()` method attached to the
    full `LaserGame` object.

    Additionally, `Menu` has a method by which graphics are drawn on to the screen,
    `DrawMenu()`. This method accesses the full game directly using the `self.game` variable that is
    required by all classes upon initialisation.    
    
    
*** Interface
    TBD
*** LaserScript
    TBD
